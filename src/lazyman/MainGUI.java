package lazyman;

import GameObj.Game;
import GameObj.League;
import Objects.Streamlink;
import Objects.Time;
import Objects.Web;
import Util.AutoUpdate;
import Util.CenterTextCellRenderer;
import Util.Console.FullConsole;
import Util.EditHosts;
import Util.IconTextCellRemderer;
import Util.MessageBox;
import Util.Console.MessageConsole;
import Util.OpenURL;
import Util.ProcessReader;
import Util.Props;
import Util.UpdateBar;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.UnknownHostException;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.Scanner;
import java.util.TimerTask;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public final class MainGUI extends javax.swing.JFrame {

    private final Streamlink streamlink;
    private final League[] leagues;

    public MainGUI() {
        streamlink = new Streamlink();
        initComponents();
        getVLCLocation();
        leagues = new League[jTabbedPane1.getTabCount()];
        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
            leagues[i] = new League();
        }
        leagues[0].setTable(NHLGameTable);
        leagues[0].setDateTF(NHLDateTF);
        leagues[0].setKeyURL("mf.svc.nhl.com");
        leagues[1].setTable(MLBGameTable);
        leagues[1].setDateTF(MLBDateTF);
        leagues[1].setKeyURL("playback.svcs.mlb.com");
        checkUpdate();
        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
            leagues[i].setName(jTabbedPane1.getTitleAt(i));
            leagues[i].setDate(Time.getPSTDate("yyyy-MM-dd"));
            leagues[i].getDateTF().setDate(Time.getPSTDate1("MMM dd, yyyy"));
            leagues[i].setFavoriteTeam(Props.getFavTeam(leagues[i].getName()));
        }
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            changePasswordMI.setVisible(false);
        }
        /*else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            com.apple.eawt.Application application = com.apple.eawt.Application.getApplication();
            application.addPreferencesMenuItem();
            application.setEnabledPreferencesMenu(true);
            changePasswordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.META_MASK));
            exitMI.setVisible(false);
        }*/
        getSLLoc();
        setButtons();
        new newDay().start();

        MessageConsole console = new MessageConsole(consoleTA);
        console.redirectOut();
        console.redirectErr(Color.RED, null);
    }

    private void checkHosts(String url, League l) {
        EditHosts eh = new EditHosts();
        if (!eh.hostsFileEdited(url)) {
            if (eh.isIpNotFound()) {
                return;
            }
            if (!System.getProperty("os.name").toLowerCase().contains("win") && Props.getPW().equals("")) {
                GetPasswordGUI gp = new GetPasswordGUI(this, true);
                gp.setLocationRelativeTo(this);
                gp.setVisible(true);
            }
            if (!eh.isWrongIP()) {
                if (!eh.hostsFileEdited(url)) {
                    l.setHostsFileEdited(eh.editHosts(url));
                }
            } else {
                l.setHostsFileEdited(eh.modifyHosts(url));
            }
        } else {
            l.setHostsFileEdited(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        consolePM = new javax.swing.JPopupMenu();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        consoleTA = new javax.swing.JTextPane();
        maximizeConsoleButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        NHLPrevDayBtn = new javax.swing.JButton();
        NHLNextDayBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        NHLDateTF = new com.toedter.calendar.JDateChooser();
        jScrollPane5 = new javax.swing.JScrollPane();
        NHLGameTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MLBGameTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        MLBDateTF = new com.toedter.calendar.JDateChooser();
        MLBPrevDayBtn = new javax.swing.JButton();
        MLBNextDayBtn = new javax.swing.JButton();
        playBtn = new javax.swing.JButton();
        saveStreamCB = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        CDNCB = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        qualityCB = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        feedCB = new javax.swing.JComboBox<>();
        refreshBtn = new javax.swing.JButton();
        restartCB = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        changePasswordMI = new javax.swing.JMenuItem();
        exitMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        preferencesMI = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        guidesMI = new javax.swing.JMenuItem();
        AboutMI = new javax.swing.JMenuItem();
        updateMI = new javax.swing.JMenuItem();

        consolePM.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LazyMan");
        setIconImage(Toolkit.getDefaultToolkit().getImage(MainGUI.class.getResource("/Logos/LM.png")));
        setLocationByPlatform(true);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Console"));
        jPanel1.setMaximumSize(new java.awt.Dimension(32, 145));

        consoleTA.setEditable(false);
        consoleTA.setBackground(new java.awt.Color(0, 0, 0));
        consoleTA.setForeground(new java.awt.Color(255, 255, 255));
        consoleTA.setDoubleBuffered(true);
        consoleTA.setMaximumSize(new java.awt.Dimension(8, 21));
        jScrollPane3.setViewportView(consoleTA);
        consoleTA.addMouseListener(new PopupListener(consolePM));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        maximizeConsoleButton.setIcon(new javax.swing.ImageIcon(MainGUI.class.getResource("/Icons/fullscreen.png")));
        maximizeConsoleButton.setLabel("   View bigger console");
        maximizeConsoleButton.setMaximumSize(new java.awt.Dimension(38, 38));
        maximizeConsoleButton.setMinimumSize(new java.awt.Dimension(38, 38));
        maximizeConsoleButton.setPreferredSize(new java.awt.Dimension(23, 23));
        maximizeConsoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximizeConsoleButtonActionPerformed(evt);
            }
        });

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        NHLPrevDayBtn.setText("<");
        NHLPrevDayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NHLPrevDayBtnActionPerformed(evt);
            }
        });

        NHLNextDayBtn.setText(">");
        NHLNextDayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NHLNextDayBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel1.setText("Date:");

        NHLDateTF.setDateFormatString("MMM d, yyyy");
        NHLDateTF.setInheritsPopupMenu(true);

        NHLGameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Away", "Home", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        NHLGameTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        NHLGameTable.setRowHeight(26);
        NHLGameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        NHLGameTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NHLGameTableMouseClicked(evt);
            }
        });
        NHLGameTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NHLGameTableKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(NHLGameTable);
        if (NHLGameTable.getColumnModel().getColumnCount() > 0) {
            NHLGameTable.getColumnModel().getColumn(0).setHeaderValue("Away");
            NHLGameTable.getColumnModel().getColumn(0).setCellRenderer(new IconTextCellRemderer());
            NHLGameTable.getColumnModel().getColumn(1).setHeaderValue("Home");
            NHLGameTable.getColumnModel().getColumn(1).setCellRenderer(new IconTextCellRemderer());
            NHLGameTable.getColumnModel().getColumn(2).setHeaderValue("Time");
            NHLGameTable.getColumnModel().getColumn(2).setCellRenderer(new CenterTextCellRenderer());
        }
        NHLGameTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        NHLGameTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        NHLGameTable.getColumnModel().getColumn(2).setPreferredWidth(100);

        NHLGameTable.getColumnModel().getColumn(0).setHeaderRenderer(new CenterTextCellRenderer());
        NHLGameTable.getColumnModel().getColumn(1).setHeaderRenderer(new CenterTextCellRenderer());
        NHLGameTable.getColumnModel().getColumn(2).setHeaderRenderer(new CenterTextCellRenderer());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NHLDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NHLPrevDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NHLNextDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(NHLNextDayBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NHLPrevDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NHLDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        NHLDateTF.getDateEditor().addPropertyChangeListener(
            "date", new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent e) {
                    leagues[0].setFavGameSelected(false);
                    leagues[0].setDate(Time.formatDateSched( ((JTextField)NHLDateTF.getDateEditor().getUiComponent()).getText() ));

                    SwingWorker<Void, Void> gg = getGames(0, 0);
                    gg.execute();
                }
            });

            jTabbedPane1.addTab("NHL", jPanel5);

            MLBGameTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null}
                },
                new String [] {
                    "Away", "Home", "Time"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            MLBGameTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            MLBGameTable.setRowHeight(26);
            MLBGameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            MLBGameTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    MLBGameTableMouseClicked(evt);
                }
            });
            MLBGameTable.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    MLBGameTableKeyReleased(evt);
                }
            });
            jScrollPane2.setViewportView(MLBGameTable);
            if (MLBGameTable.getColumnModel().getColumnCount() > 0) {
                MLBGameTable.getColumnModel().getColumn(0).setCellRenderer(new IconTextCellRemderer());
                MLBGameTable.getColumnModel().getColumn(1).setCellRenderer(new IconTextCellRemderer());
                MLBGameTable.getColumnModel().getColumn(2).setCellRenderer(new CenterTextCellRenderer());
            }
            MLBGameTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            MLBGameTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            MLBGameTable.getColumnModel().getColumn(2).setPreferredWidth(100);

            MLBGameTable.getColumnModel().getColumn(0).setHeaderRenderer(new CenterTextCellRenderer());
            MLBGameTable.getColumnModel().getColumn(1).setHeaderRenderer(new CenterTextCellRenderer());
            MLBGameTable.getColumnModel().getColumn(2).setHeaderRenderer(new CenterTextCellRenderer());

            javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
            jPanel7.setLayout(jPanel7Layout);
            jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
            );
            jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
            );

            jLabel2.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
            jLabel2.setText("Date:");

            MLBDateTF.setDateFormatString("MMM d, yyyy");
            MLBDateTF.setInheritsPopupMenu(true);

            MLBPrevDayBtn.setText("<");
            MLBPrevDayBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    MLBPrevDayBtnActionPerformed(evt);
                }
            });

            MLBNextDayBtn.setText(">");
            MLBNextDayBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    MLBNextDayBtnActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
            jPanel6.setLayout(jPanel6Layout);
            jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MLBDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MLBPrevDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MLBNextDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 0, Short.MAX_VALUE))
            );
            jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(3, 3, 3)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MLBPrevDayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MLBNextDayBtn))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(MLBDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            MLBDateTF.getDateEditor().addPropertyChangeListener(
                "date", new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent e) {
                        leagues[1].setFavGameSelected(false);
                        leagues[1].setDate(Time.formatDateSched( ((JTextField)MLBDateTF.getDateEditor().getUiComponent()).getText() ));

                        SwingWorker<Void, Void> gg = getGames(0, 1);
                        gg.execute();
                    }
                });

                jTabbedPane1.addTab("MLB", jPanel6);

                playBtn.setMnemonic(KeyEvent.VK_P);
                playBtn.setText("Play");
                playBtn.setEnabled(false);
                playBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        playBtnActionPerformed(evt);
                    }
                });

                saveStreamCB.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
                saveStreamCB.setMnemonic(KeyEvent.VK_V);
                saveStreamCB.setText("Save stream");
                saveStreamCB.setEnabled(false);
                saveStreamCB.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        saveStreamCBActionPerformed(evt);
                    }
                });

                jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("CDN"));

                CDNCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Akamai", "Level 3" }));
                CDNCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        CDNCBItemStateChanged(evt);
                    }
                });

                javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(CDNCB, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                );
                jPanel4Layout.setVerticalGroup(
                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(CDNCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Quality"));

                qualityCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "360p", "540p", "720p", "720p60" }));
                qualityCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        qualityCBItemStateChanged(evt);
                    }
                });

                javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                jPanel3.setLayout(jPanel3Layout);
                jPanel3Layout.setHorizontalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(qualityCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
                jPanel3Layout.setVerticalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qualityCB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                );

                jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Feed"));

                feedCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        feedCBItemStateChanged(evt);
                    }
                });

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(feedCB, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                );
                jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(feedCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                );

                refreshBtn.setText("Refresh");
                refreshBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        refreshBtnActionPerformed(evt);
                    }
                });

                restartCB.setText("Restart");
                restartCB.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        restartCBActionPerformed(evt);
                    }
                });

                jMenu1.setMnemonic(KeyEvent.VK_F);
                jMenu1.setText("File");

                changePasswordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                changePasswordMI.setText("Change Password");
                changePasswordMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        changePasswordMIActionPerformed(evt);
                    }
                });
                jMenu1.add(changePasswordMI);

                exitMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
                exitMI.setText("Exit");
                exitMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        exitMIActionPerformed(evt);
                    }
                });
                jMenu1.add(exitMI);

                jMenuBar1.add(jMenu1);

                jMenu2.setMnemonic(KeyEvent.VK_E);
                jMenu2.setText("Edit");

                preferencesMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
                preferencesMI.setText("Preferences");
                preferencesMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        preferencesMIActionPerformed(evt);
                    }
                });
                jMenu2.add(preferencesMI);

                jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
                jMenuItem1.setText("Change IP");
                jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem1ActionPerformed(evt);
                    }
                });
                jMenu2.add(jMenuItem1);

                jMenuItem2.setText("Clear Hosts File");
                jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem2ActionPerformed(evt);
                    }
                });
                jMenu2.add(jMenuItem2);

                jMenuBar1.add(jMenu2);

                jMenu3.setMnemonic(KeyEvent.VK_H);
                jMenu3.setText("Help");

                guidesMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
                guidesMI.setText("Guides");
                guidesMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        guidesMIActionPerformed(evt);
                    }
                });
                jMenu3.add(guidesMI);

                AboutMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                AboutMI.setText("About");
                AboutMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        AboutMIActionPerformed(evt);
                    }
                });
                jMenu3.add(AboutMI);

                updateMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
                updateMI.setText("Update Available");
                updateMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        updateMIActionPerformed(evt);
                    }
                });
                jMenu3.add(updateMI);

                jMenuBar1.add(jMenu3);

                setJMenuBar(jMenuBar1);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(maximizeConsoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(1, 1, 1)
                                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(playBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(saveStreamCB)
                                                .addComponent(restartCB)))
                                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(refreshBtn)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(refreshBtn)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(saveStreamCB))
                                .addGap(3, 3, 3)
                                .addComponent(restartCB)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maximizeConsoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMIActionPerformed

    private void saveStreamCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStreamCBActionPerformed
        if (!playBtn.getText().equals("Stop Recording")) {
            if (saveStreamCB.isSelected()) {
                playBtn.setText("Record");
            } else {
                playBtn.setText("Play");
            }
        }

        streamlink.record = saveStreamCB.isSelected();
    }//GEN-LAST:event_saveStreamCBActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        if (!playBtn.isEnabled()) {
            return;
        }
        
        if (leagues[jTabbedPane1.getSelectedIndex()].getName().equals("MLB")) {
            if (Integer.parseInt(leagues[jTabbedPane1.getSelectedIndex()].getDate().substring(0, 4)) > 2017)
                checkHosts(leagues[jTabbedPane1.getSelectedIndex()].getKeyURL(), leagues[jTabbedPane1.getSelectedIndex()]);
            else
                checkHosts("mlb-ws-mf.media.mlb.com", leagues[jTabbedPane1.getSelectedIndex()]);
        } else
            checkHosts(leagues[jTabbedPane1.getSelectedIndex()].getKeyURL(), leagues[jTabbedPane1.getSelectedIndex()]);

        if (!leagues[jTabbedPane1.getSelectedIndex()].isHostsFileEdited()) {
            MessageBox.show("You are not completely set up! Your hosts file needs to be edited for " + leagues[jTabbedPane1.getSelectedIndex()].getName() + ".", "Hosts file not edited", 2);
            return;
        }

        if (streamlink.getLocation() == null || streamlink.getLocation().equals("")) {
            getSLLoc();

            if (streamlink.getLocation() == null || streamlink.getLocation().equals("")) {
                MessageBox.show("Streamlink was not set! It is required to stream games.", "Streamlink not set", 2);
                return;
            }
        }

        leagues[jTabbedPane1.getSelectedIndex()].getGwi().setUrl(getMediaID(), leagues[jTabbedPane1.getSelectedIndex()].getName());

        if (leagues[jTabbedPane1.getSelectedIndex()].getGwi().getUrl().endsWith("n/a")) {
            MessageBox.show("The stream has expired. Ask StevensNJD4 to make it available.", "Not Available", 0);
            return;
        }

        if (playBtn.getText().equals("Stop Recording")) {
            leagues[jTabbedPane1.getSelectedIndex()].setStreamlinkSwitch(-1);

            if (saveStreamCB.isSelected()) {
                playBtn.setText("Record");
            } else {
                playBtn.setText("Play");
            }
            return;
        }

        if (saveStreamCB.isSelected()) {
            leagues[jTabbedPane1.getSelectedIndex()].setStreamlinkSwitch(1);
            playBtn.setText("Stop Recording");
        } else {
            leagues[jTabbedPane1.getSelectedIndex()].setStreamlinkSwitch(0);
        }

        SwingWorker<Void, Void> pl = playGame();
        pl.execute();
    }//GEN-LAST:event_playBtnActionPerformed

    private void preferencesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMIActionPerformed
        int refresh = Props.getRefreshRate();

        Options op = new Options(this, true);
        op.setLocationRelativeTo(this);
        op.setVisible(true);

        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
            leagues[i].setFavoriteTeam(Props.getFavTeam(leagues[i].getName()));

            if (!leagues[i].getTable().getModel().getValueAt(0, 0).equals("None")) {
                if (leagues[i].getName().equals(jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex()))) {
                    int idx = leagues[i].getSelectedGame();
                    setRow(idx, i);
                    setFeed(idx, 'a');
                }
                if (Props.getRefreshRate() != refresh) {
                    refresh = Props.getRefreshRate();

                    if (refresh == 0 && leagues[i].getTimer() != null) {
                        leagues[i].getTimer().cancel();
                        leagues[i].setTimer(null);
                    } else if (refresh > 0 && leagues[i].getTimer() != null) {
                        leagues[i].getTimer().cancel();
                        leagues[i].getTimer().scheduleAtFixedRate(new Refresh(i), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                    } else if (refresh > 0 && leagues[i].getTimer() == null) {
                        leagues[i].setTimer(new Timer());
                        leagues[i].getTimer().scheduleAtFixedRate(new Refresh(i), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                    }
                }
            }
        }
    }//GEN-LAST:event_preferencesMIActionPerformed

    private void changePasswordMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordMIActionPerformed
        GetPasswordGUI gp = new GetPasswordGUI(this, true);
        gp.setLocationRelativeTo(this);
        gp.setVisible(true);
    }//GEN-LAST:event_changePasswordMIActionPerformed

    private void AboutMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMIActionPerformed
        AboutGUI a = new AboutGUI(this, true);
        a.setLocationRelativeTo(this);
        a.setVisible(true);
    }//GEN-LAST:event_AboutMIActionPerformed

    private void guidesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guidesMIActionPerformed
        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/index");
    }//GEN-LAST:event_guidesMIActionPerformed

    private void updateMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMIActionPerformed
        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/downloads");
    }//GEN-LAST:event_updateMIActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        SwingWorker<Void, Void> gg;
        gg = getGames(-1, jTabbedPane1.getSelectedIndex());
        if (leagues[jTabbedPane1.getSelectedIndex()].getTimer() != null) {
            leagues[jTabbedPane1.getSelectedIndex()].getTimer().cancel();
            leagues[jTabbedPane1.getSelectedIndex()].setTimer(new Timer());
            leagues[jTabbedPane1.getSelectedIndex()].getTimer().scheduleAtFixedRate(new Refresh(jTabbedPane1.getSelectedIndex()), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
        }
        gg.execute();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void maximizeConsoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximizeConsoleButtonActionPerformed
        FullConsole fc = new FullConsole(this, true, consoleTA);
        fc.setLocationRelativeTo(this);
        fc.setVisible(true);
    }//GEN-LAST:event_maximizeConsoleButtonActionPerformed

    private void NHLPrevDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLPrevDayBtnActionPerformed
        leagues[jTabbedPane1.getSelectedIndex()].setFavGameSelected(false);
        leagues[jTabbedPane1.getSelectedIndex()].setDate(Time.getPrevDay(leagues[jTabbedPane1.getSelectedIndex()].getDate()));
        leagues[jTabbedPane1.getSelectedIndex()].getDateTF().setDate(Time.getDate(leagues[jTabbedPane1.getSelectedIndex()].getDate(), "yyyy-MM-dd"));
        leagues[jTabbedPane1.getSelectedIndex()].setSelectedGame(0);
    }//GEN-LAST:event_NHLPrevDayBtnActionPerformed

    private void NHLNextDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLNextDayBtnActionPerformed
        leagues[jTabbedPane1.getSelectedIndex()].setFavGameSelected(false);
        leagues[jTabbedPane1.getSelectedIndex()].setDate(Time.getNextDay(leagues[jTabbedPane1.getSelectedIndex()].getDate()));
        leagues[jTabbedPane1.getSelectedIndex()].getDateTF().setDate(Time.getDate(leagues[jTabbedPane1.getSelectedIndex()].getDate(), "yyyy-MM-dd"));
        leagues[jTabbedPane1.getSelectedIndex()].setSelectedGame(0);
    }//GEN-LAST:event_NHLNextDayBtnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        CustomIP c = new CustomIP(this, true);
        c.setLocationRelativeTo(this);
        c.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        EditHosts eh = new EditHosts();

        if (eh.clearHosts(leagues)) {
            MessageBox.show("Hosts file cleared from LazyMan edits.", "Hosts File Cleared", 0);
        } else {
            MessageBox.show("Hosts file not cleared from LazyMan edits. Please check the console area.", "Hosts Not File Cleared", 2);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void MLBPrevDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MLBPrevDayBtnActionPerformed
        leagues[jTabbedPane1.getSelectedIndex()].setFavGameSelected(false);
        leagues[jTabbedPane1.getSelectedIndex()].setDate(Time.getPrevDay(leagues[jTabbedPane1.getSelectedIndex()].getDate()));
        leagues[jTabbedPane1.getSelectedIndex()].getDateTF().setDate(Time.getDate(leagues[jTabbedPane1.getSelectedIndex()].getDate(), "yyyy-MM-dd"));
        leagues[jTabbedPane1.getSelectedIndex()].getGwi().setDate(leagues[jTabbedPane1.getSelectedIndex()].getDate());
        leagues[jTabbedPane1.getSelectedIndex()].setSelectedGame(0);
    }//GEN-LAST:event_MLBPrevDayBtnActionPerformed

    private void MLBNextDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MLBNextDayBtnActionPerformed
        leagues[jTabbedPane1.getSelectedIndex()].setFavGameSelected(false);
        leagues[jTabbedPane1.getSelectedIndex()].setDate(Time.getNextDay(leagues[jTabbedPane1.getSelectedIndex()].getDate()));
        leagues[jTabbedPane1.getSelectedIndex()].getDateTF().setDate(Time.getDate(leagues[jTabbedPane1.getSelectedIndex()].getDate(), "yyyy-MM-dd"));
        leagues[jTabbedPane1.getSelectedIndex()].getGwi().setDate(leagues[jTabbedPane1.getSelectedIndex()].getDate());
        leagues[jTabbedPane1.getSelectedIndex()].setSelectedGame(0);
    }//GEN-LAST:event_MLBNextDayBtnActionPerformed

    private void MLBGameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MLBGameTableMouseClicked
        if (MLBGameTable.getModel().getValueAt(0, 0).equals("None")) {
            return;
        }

        leagues[jTabbedPane1.getSelectedIndex()].setSelectedGame(MLBGameTable.getSelectedRow());
        getAvailableStreams(leagues[jTabbedPane1.getSelectedIndex()].getSelectedGame());
        setFeed(MLBGameTable.getSelectedRow(), 'a');
        enablePlayBtn();

        if (evt != null && evt.getClickCount() == 2) {
            playBtnActionPerformed(null);
        }
    }//GEN-LAST:event_MLBGameTableMouseClicked

    private void MLBGameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MLBGameTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || KeyEvent.VK_DOWN == evt.getKeyCode()) {
            MLBGameTableMouseClicked(null);
        }
    }//GEN-LAST:event_MLBGameTableKeyReleased

    private void qualityCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_qualityCBItemStateChanged
        String quality = (String) qualityCB.getSelectedItem();

        if (quality.equals("720p60")) {
            quality = "best";
        }

        for (League l : leagues) {
            l.getGwi().setQuality(quality);
        }
        Props.setBitrate(quality);
    }//GEN-LAST:event_qualityCBItemStateChanged

    private void CDNCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CDNCBItemStateChanged
        if (leagues[jTabbedPane1.getSelectedIndex()].getGames() == null) {
            return;
        }

        String cdn = (String) CDNCB.getSelectedItem();

        if (cdn.equals("Akamai")) {
            leagues[jTabbedPane1.getSelectedIndex()].getGwi().setCdn("akc");
        } else {
            leagues[jTabbedPane1.getSelectedIndex()].getGwi().setCdn("l3c");
        }

        Props.setCDN(cdn);
    }//GEN-LAST:event_CDNCBItemStateChanged

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (leagues == null) {
            return;
        }

        if (leagues[jTabbedPane1.getSelectedIndex()].getGames() != null) {
            setRow(leagues[jTabbedPane1.getSelectedIndex()].getSelectedGame(), jTabbedPane1.getSelectedIndex());
            leagues[jTabbedPane1.getSelectedIndex()].getGwi().setDate(leagues[jTabbedPane1.getSelectedIndex()].getDate());
        } else {
            feedCB.removeAllItems();
        }
        enablePlayBtn();
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void feedCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_feedCBItemStateChanged
        if (feedCB.getItemCount() >= 1) {
            enablePlayBtn();
        }
    }//GEN-LAST:event_feedCBItemStateChanged

    private void NHLGameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NHLGameTableMouseClicked
        if (NHLGameTable.getModel().getValueAt(0, 0).equals("None")) {
            return;
        }

        leagues[jTabbedPane1.getSelectedIndex()].setSelectedGame(NHLGameTable.getSelectedRow());
        getAvailableStreams(leagues[jTabbedPane1.getSelectedIndex()].getSelectedGame());
        setFeed(NHLGameTable.getSelectedRow(), 'a');
        enablePlayBtn();

        if (evt != null && evt.getClickCount() == 2) {
            playBtnActionPerformed(null);
        }
    }//GEN-LAST:event_NHLGameTableMouseClicked

    private void NHLGameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NHLGameTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || KeyEvent.VK_DOWN == evt.getKeyCode()) {
            NHLGameTableMouseClicked(null);
        }
    }//GEN-LAST:event_NHLGameTableKeyReleased

    private void restartCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartCBActionPerformed
        streamlink.restart = restartCB.isSelected();
    }//GEN-LAST:event_restartCBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMI;
    private javax.swing.JComboBox<String> CDNCB;
    private com.toedter.calendar.JDateChooser MLBDateTF;
    private javax.swing.JTable MLBGameTable;
    private javax.swing.JButton MLBNextDayBtn;
    private javax.swing.JButton MLBPrevDayBtn;
    private com.toedter.calendar.JDateChooser NHLDateTF;
    private javax.swing.JTable NHLGameTable;
    private javax.swing.JButton NHLNextDayBtn;
    private javax.swing.JButton NHLPrevDayBtn;
    private javax.swing.JMenuItem changePasswordMI;
    private javax.swing.JPopupMenu consolePM;
    private javax.swing.JTextPane consoleTA;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JComboBox<String> feedCB;
    private javax.swing.JMenuItem guidesMI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton maximizeConsoleButton;
    private javax.swing.JButton playBtn;
    private javax.swing.JMenuItem preferencesMI;
    private javax.swing.JComboBox<String> qualityCB;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JCheckBox restartCB;
    private javax.swing.JCheckBox saveStreamCB;
    private javax.swing.JMenuItem updateMI;
    // End of variables declaration//GEN-END:variables

    class newDay extends Thread {

        @Override
        public void run() {
            while (true) {
                try {
                    Thread.sleep(Time.nextDay());
                    for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
                        leagues[i].setDate(Time.getPSTDate("yyyy-MM-dd"));
                        leagues[i].getDateTF().setDate(Time.getPSTDate1("MMM dd, yyyy"));
                        leagues[i].getGwi().setDate(leagues[i].getDate());
                    }
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }

    }

    private SwingWorker<Void, Void> updating() {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                UpdateBar ub = new UpdateBar(null, true);
                ub.setLocationRelativeTo(null);
                ub.setVisible(true);
                return null;
            }
        };
        return worker;

    }

    private SwingWorker<Void, Void> getGames(final int row, int lg) {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    DefaultTableModel model = (DefaultTableModel) leagues[lg].getTable().getModel();
                    model.setRowCount(0);

                    leagues[lg].setGames(leagues[lg].getDate());

                    if (leagues[lg].getGames() != null && leagues[lg].getGames().length > 0) {
                        if (Time.isToday(leagues[lg].getDate()) && Props.getRefreshRate() > 0 && leagues[lg].getTimer() == null) {
                            leagues[lg].setTimer(new Timer());
                            leagues[lg].getTimer().scheduleAtFixedRate(new Refresh(lg), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                        } else if (leagues[lg].getTimer() != null && !Time.isToday(leagues[lg].getDate())) {
                            leagues[lg].getTimer().cancel();
                            leagues[lg].setTimer(null);
                        }
                        String time;

                        for (Game g1 : leagues[lg].getGames()) {
                            if (g1.getTimeRemaining().equalsIgnoreCase("n/a")) {
                                time = Time.toLocalTZ(g1.getDate() + " " + g1.getTime(), "UTC", "yyyy-MM-dd H:mm");
                            } else {
                                time = g1.getTimeRemaining();
                            }
                            model.addRow(new Object[]{g1.getAwayTeamFull(),
                                g1.getHomeTeamFull(),
                                time});
                        }
                        leagues[lg].getTable().setModel(model);

                        if (row != -1) {
                            leagues[lg].setSelectedGame(setRow(row, lg));
                        } else if (jTabbedPane1.getTitleAt(lg).equals(leagues[jTabbedPane1.getSelectedIndex()].getName())) {
                            setRow(row, lg);
                            enablePlayBtn();
                        }

                        leagues[lg].getGwi().setDate(leagues[lg].getDate());
                    } else if (leagues[lg].getGames() == null) {
                        model.setRowCount(0);
                        model.addRow(new Object[]{"None", "None", "None"});
                        if (leagues[jTabbedPane1.getSelectedIndex()].getTimer() != null) {
                            leagues[jTabbedPane1.getSelectedIndex()].getTimer().cancel();
                            leagues[jTabbedPane1.getSelectedIndex()].setTimer(null);
                        }
                        if (jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex()).equals(leagues[jTabbedPane1.getSelectedIndex()].getName())) {
                            playBtn.setEnabled(false);
                        }
                    }

                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

                return null;

            }

        };
        return worker;
    }

    private String getFavTeamIndex(String team, int lg) {
        for (int i = 0; i < leagues[lg].getGames().length; i++) {
            if ((leagues[lg].getGames()[i].getAwayTeam()).equals(team)) {
                if (leagues[lg].getGames()[i].getGameState().contains("Pre") || leagues[lg].getGames()[i].getGameState().contains("In Progress") || leagues[lg].getGames()[i].getGameState().contains("Final")) {
                    if (leagues[jTabbedPane1.getSelectedIndex()].getGames()[i].contains("AWAY")) {
                        return i + "a";
                    }
                    return i + "n";
                }
                return "-1n";
            }
            if (leagues[lg].getGames()[i].getHomeTeam().equals(team)) {
                if (leagues[lg].getGames()[i].getGameState().contains("Pre") || leagues[lg].getGames()[i].getGameState().contains("In Progress") || leagues[lg].getGames()[i].getGameState().contains("Final")) {
                    if (leagues[jTabbedPane1.getSelectedIndex()].getGames()[i].contains("HOME")) {
                        return i + "h";
                    }
                    return i + "n";
                }
                return "-1n";
            }
        }
        return "-1n";
    }

    private int setRow(int row, int lg) {
        if (row != -1) {
            if ((!leagues[lg].getFavoriteTeam().equals("") || !leagues[lg].getFavoriteTeam().equals("None")) && !leagues[lg].isFavGameSelected()) {
                String index = getFavTeamIndex(leagues[lg].getFavoriteTeam(), lg);
                int idx = Integer.parseInt(index.substring(0, index.length() - 1));
                char homeOrAway = index.charAt(index.length() - 1);

                if (idx != -1) {
                    if (jTabbedPane1.getTitleAt(lg).equals(leagues[jTabbedPane1.getSelectedIndex()].getName())) {
                        getAvailableStreams(idx);
                        setFeed(idx, homeOrAway);
                    }
                    if (jTabbedPane1.getTitleAt(lg).equals(leagues[jTabbedPane1.getSelectedIndex()].getName())) {
                        leagues[lg].getTable().setRowSelectionInterval(idx, idx);
                        leagues[lg].setFavGameSelected(true);
                    }
                    return idx;
                }
            }

            if (jTabbedPane1.getTitleAt(lg).equals(leagues[jTabbedPane1.getSelectedIndex()].getName())) {
                getAvailableStreams(row);
                setFeed(row, 'a');
            }

            if (jTabbedPane1.getTitleAt(lg).equals(leagues[jTabbedPane1.getSelectedIndex()].getName())) {
                leagues[lg].getTable().setRowSelectionInterval(row, row);
            }
        } else if (jTabbedPane1.getTitleAt(lg).equals(leagues[jTabbedPane1.getSelectedIndex()].getName())) {
            leagues[lg].getTable().setRowSelectionInterval(leagues[lg].getSelectedGame(), leagues[lg].getSelectedGame());
        }

        return row;
    }

    private void setFeed(int idx, char homeOrAway) {
        if (leagues[jTabbedPane1.getSelectedIndex()].isFavGameSelected() || leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getNumOfFeeds() < 1) {
            return;
        }
        switch (homeOrAway) {
            case 'a':
                if ("1".equals(Props.getPreferFrench()) && leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].contains("FRENCH")) {
                    feedCB.setSelectedIndex(leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getFeedIndex("FRENCH"));
                } else if (leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].contains("AWAY")) {
                    try {
                        feedCB.setSelectedIndex(1);
                    } catch (Exception e) {
                    }
                } else {
                    feedCB.setSelectedIndex(0);
                }
                break;
            case 'h':
                if ("1".equals(Props.getPreferFrench()) && leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].contains("FRENCH")) {
                    feedCB.setSelectedIndex(leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getFeedIndex("FRENCH"));
                } else {
                    try {
                        feedCB.setSelectedIndex(0);
                    } catch (Exception e) {
                    }
                }
        }
    }

    private void getAvailableStreams(int row) {
        feedCB.removeAllItems();
        if (leagues[jTabbedPane1.getSelectedIndex()].getGames()[row].getNumOfFeeds() > 0) {
            for (int i = 0; i < leagues[jTabbedPane1.getSelectedIndex()].getGames()[row].getNumOfFeeds(); i++) {
                if (!leagues[jTabbedPane1.getSelectedIndex()].getGames()[row].getFeedTV(i).isEmpty()) {
                    feedCB.addItem(leagues[jTabbedPane1.getSelectedIndex()].getGames()[row].getFeedName(i) + " (" + leagues[jTabbedPane1.getSelectedIndex()].getGames()[row].getFeedTV(i) + ")");
                } else {
                    feedCB.addItem(leagues[jTabbedPane1.getSelectedIndex()].getGames()[row].getFeedName(i));
                }
            }
        }
    }

    private boolean checkID(String id) {
        BufferedReader br = null;
        boolean idExists = false;
        try {
            String base = "";
            try {
                if (!System.getProperty("os.name").toLowerCase().contains("linux")) {
                    base = Paths.get(Props.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toFile().getParent();
                } else {
                    base = System.getProperty("user.home") + System.getProperty("file.separator") + ".config" + System.getProperty("file.separator") + "lazyman";
                }
            } catch (URISyntaxException ex) {
                ex.printStackTrace();
            }
            File ids;
            if (leagues[jTabbedPane1.getSelectedIndex()].getName().equals("NHL")) {
                ids = new File(base + System.getProperty("file.separator") + "ids.txt");
            } else {
                ids = new File(base + System.getProperty("file.separator") + "mlbids.txt");
            }
            if (!ids.exists()) {
                fillIDs(ids);
            }

            br = new BufferedReader(new FileReader(ids));
            String line;
            while ((line = br.readLine()) != null) {
                if (line.contains(id)) {
                    idExists = true;
                    break;
                }
            }
            if (!idExists) {
                fillIDs(ids);

                br = new BufferedReader(new FileReader(ids));

                while ((line = br.readLine()) != null) {
                    if (line.equals(id)) {
                        idExists = true;
                        break;
                    }
                }
            }

        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
        return idExists;
    }

    private void fillIDs(File ids) {
        String file = "ids";
        if (!leagues[jTabbedPane1.getSelectedIndex()].getPlaybackIDs().isEmpty()) {
            leagues[jTabbedPane1.getSelectedIndex()].getPlaybackIDs().clear();
        }
        if (!leagues[jTabbedPane1.getSelectedIndex()].getName().equals("NHL")) {
            file = "mlbids";
        }

        try {
            String url = "nhl.freegamez.ga";

            if (!Props.getIP().equals("")) {
                url = Props.getIP();
            }
            Collections.addAll(leagues[jTabbedPane1.getSelectedIndex()].getPlaybackIDs(), Web.getContent("http://" + url + "/static/" + file + ".txt").replace("akc", "").replace("l3c", "").split("\n"));
        } catch (UnknownHostException uhe) {
            MessageBox.show("The server may be down.", "Error", 2);
        }
        try (FileWriter writer = new FileWriter(ids, false)) {
            for (String str : leagues[jTabbedPane1.getSelectedIndex()].getPlaybackIDs()) {
                writer.write(str + "\r\n");
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            leagues[jTabbedPane1.getSelectedIndex()].getPlaybackIDs().clear();
        }
    }

    private void enablePlayBtn() {
        if (leagues[jTabbedPane1.getSelectedIndex()].getGames() == null) {
            playBtn.setEnabled(false);
            saveStreamCB.setEnabled(false);

            if (saveStreamCB.isSelected()) {
                saveStreamCB.setSelected(false);
                playBtn.setText("Play");
                streamlink.record = false;
            }
            return;
        }
        int idx = leagues[jTabbedPane1.getSelectedIndex()].getSelectedGame();
        if (leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getNumOfFeeds() < 1) {
            playBtn.setEnabled(false);
            return;
        }
        if (leagues[jTabbedPane1.getSelectedIndex()].getStreamlinkSwitch() < 1) {
            String d = Time.toLocalTZ(leagues[jTabbedPane1.getSelectedIndex()].getDate(), "America/Los_Angeles", "yyyy-MM-dd", "yyyy-MM-dd");
            boolean e = (leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getGameState().contains("In Progress") || leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getGameState().equals("Final")) || Time.isXMinBeforeGame(d + " " + Time.toLocalTZ(leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getTime(), "UTC", "H:mm"), 40);

            if (e) {
                e = e && checkID(leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getFeedID(feedCB.getSelectedIndex()));
            }

            playBtn.setEnabled(e);

            if (!e && saveStreamCB.isSelected()) {
                saveStreamCB.setSelected(false);
                playBtn.setText("Play");
                streamlink.record = false;
            }
            saveStreamCB.setEnabled(e);
        } else {
            playBtn.setText("Stop Recording");
            playBtn.setEnabled(true);
            saveStreamCB.setEnabled(true);
            saveStreamCB.setSelected(true);
        }

        restartCB.setEnabled(leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx].getGameState().contains("In Progress"));

        if (!leagues[jTabbedPane1.getSelectedIndex()].getPlaybackIDs().isEmpty()) {
            leagues[jTabbedPane1.getSelectedIndex()].getPlaybackIDs().clear();
        }
    }

    private SwingWorker<Void, Void> playGame() {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                try {
                    if (!Props.getVlcloc().equals("")) {
                        Process l;
                        int idx = leagues[jTabbedPane1.getSelectedIndex()].getSelectedGame();
                        l = streamlink.run(leagues[jTabbedPane1.getSelectedIndex()].getGames()[idx], leagues[jTabbedPane1.getSelectedIndex()].getGwi());

                        if (l != null) {
                            SwingWorker<Void, Void> go = getSLOutput(l);
                            go.execute();

                            System.out.print("\n-----\n");
                            System.out.println("Streamlink starting...\n");

                            while (l.isAlive()) {
                                Thread.sleep(700);
                                if (leagues[jTabbedPane1.getSelectedIndex()].getStreamlinkSwitch() == -1) {
                                    l.destroy();
                                }
                            }
                            l.waitFor();
                            System.out.println("Streamlink done");
                            int li = consoleTA.getText().lastIndexOf("-----");
                            if (!consoleTA.getText().substring(li, consoleTA.getText().length()).contains("Opening")) {
                                MessageBox.show("Stream unavailable. Please report the game you are trying to play.", "Error", 2);
                            }
                        } else if (playBtn.getText().equals("Stop Recording")) {
                            leagues[jTabbedPane1.getSelectedIndex()].setStreamlinkSwitch(-1);

                            if (saveStreamCB.isSelected()) {
                                playBtn.setText("Record");
                            } else {
                                playBtn.setText("Play");
                            }
                        }
                    } else {
                        String message = "Please set the location to your media player executable in Edit > Preferences.";
                        MessageBox.show(message, "Error", 2);
                    }
                    playBtn.setEnabled(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

    private void getSLLoc() {
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            String ls = "streamlink\\streamlink.exe";
            java.io.File f = new java.io.File(ls);
            if (f.exists()) {
                streamlink.setLocation(ls);
            } else {
                MessageBox.show("Could not find Streamlink. Please extract the folder comtaining Streamlink to the same folder as LazyMan.", "Error", 2);
            }
        } else {
            String ls;
            if (System.getProperty("os.name").toLowerCase().contains("mac")) {
                ls = "/usr/local/bin/streamlink";
            } else {
                ls = "streamlink";
            }
            if (cmdExists(ls)) {
                streamlink.setLocation(ls);
            } else {
                MessageBox.show("Could not find Streamlink. Please follow the guide on how to install it.", "Error", 2);
            }
        }
    }

    private boolean cmdExists(String cmd) {
        String output;
        try {
            output = ProcessReader.getProcessOutput(new ProcessBuilder("/bin/sh", "-c", cmd).redirectErrorStream(true).start()).toLowerCase();
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }

        return !(output.equals("")
                || output.contains("not found")
                || output.contains("no file")
                || output.contains("no such"));
    }

    private void setButtons() {
        String bitrate = Props.getBitrate(), cdn = Props.getCDN();

        if (!bitrate.equals("")) {
            if (!bitrate.equals("best")) {
                qualityCB.setSelectedItem(bitrate);
            } else {
                qualityCB.setSelectedItem("720p60");
            }
        } else {
            qualityCB.setSelectedItem("720p");
        }
        if (!cdn.equals("")) {
            CDNCB.setSelectedItem(cdn);
        } else {
            CDNCB.setSelectedItem("Akamai");
        }
        for (League l : leagues) {
            if (!bitrate.equals("")) {
                l.getGwi().setQuality(bitrate);
            } else {
                l.getGwi().setQuality("720p");
            }

            if (!cdn.equals("")) {
                if (cdn.equals("Akamai")) {
                    l.getGwi().setCdn("akc");
                } else {
                    l.getGwi().setCdn("l3c");
                }
            } else {
                l.getGwi().setCdn("akc");
            }
        }
    }

    private String getMediaID() {
        return leagues[jTabbedPane1.getSelectedIndex()].getGames()[leagues[jTabbedPane1.getSelectedIndex()].getSelectedGame()].getFeedID(feedCB.getSelectedIndex());
    }

    private void checkUpdate() {
        try (Scanner s = new Scanner(getClass().getResourceAsStream("/VERSION.txt"))) {
            String[] ver = s.nextLine().split("\\.");
            int major = Integer.parseInt(ver[0]), minor = Integer.parseInt(ver[1]), patch = Integer.parseInt(ver[2]), build = Integer.parseInt(ver[3].replace(" BETA", ""));
            int curMajor, curMinor, curPatch, curBuild;
            String version;
            try {
                version = Web.getContent("https://raw.githubusercontent.com/StevensNJD4/LazyMan/master/VERSION").trim();
                String[] curVer = version.split("\\.");
                curMajor = Integer.parseInt(curVer[0]);
                curMinor = Integer.parseInt(curVer[1]);
                curPatch = Integer.parseInt(curVer[2]);
                curBuild = Integer.parseInt(curVer[3]);
            } catch (UnknownHostException | NumberFormatException ex) {
                return;
            }

            if (!ver[3].contains("BETA")) {
                if (curMajor > major || (curMajor == major && curMinor > minor) || (curMajor == major && curMinor >= minor && curPatch > patch) || (curMajor == major && curMinor >= minor && curPatch >= patch && curBuild > build)) {
                    if (MessageBox.ask("New update available!\nWould you like to update?", "New Update!") == MessageBox.yesOption()) {
                        SwingWorker<Void, Void> u = updating();
                        u.execute();
                        if (AutoUpdate.download(version)) {
                            if (AutoUpdate.unZipIt()) {
                                String loc;

                                if (!System.getProperty("os.name").toLowerCase().contains("linux")) {
                                    loc = Paths.get(".").toAbsolutePath().normalize().toString() + System.getProperty("file.separator");
                                    if (System.getProperty("os.name").toLowerCase().contains("win")) {
                                        loc += "LazyMan.exe";
                                    } else {
                                        loc += "LazyMan.jar";
                                    }
                                } else {
                                    loc = new java.io.File(Props.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParent() + System.getProperty("file.separator") + "LazyMan.jar";
                                }
                                Runtime.getRuntime().exec("java -jar " + loc);
                                System.exit(0);
                            }
                        }
                        MessageBox.show("Could not authentically update. Please manually update", version, build);
                    }
                } else {
                    updateMI.setVisible(false);
                }
            } else {
                if (curMajor > major || (curMajor == major && curMinor > minor) || (curMajor == major && curMinor >= minor && curPatch > patch) || (curMajor == major && curMinor >= minor && curPatch >= patch && curBuild > build)) {
                    if (MessageBox.ask("New stable update available!\nWould you like to update", "New Update!") == MessageBox.yesOption()) {
                        SwingWorker<Void, Void> u = updating();
                        u.execute();
                        if (AutoUpdate.download(version)) {
                            if (AutoUpdate.unZipIt()) {
                                String loc;

                                if (!System.getProperty("os.name").toLowerCase().contains("linux")) {
                                    loc = Paths.get(".").toAbsolutePath().normalize().toString() + System.getProperty("file.separator");
                                    if (System.getProperty("os.name").toLowerCase().contains("win")) {
                                        loc += "LazyMan.exe";
                                    } else {
                                        loc += "LazyMan.jar";
                                    }
                                } else {
                                    loc = new java.io.File(Props.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParent() + System.getProperty("file.separator") + "LazyMan.jar";
                                }
                                Runtime.getRuntime().exec("java -jar " + loc);
                                System.exit(0);
                            }
                        }
                        MessageBox.show("Could not automatically update. Please manually update.", "Could not automatically update", 2);
                    }
                } else {
                    version = Web.getContent("https://raw.githubusercontent.com/StevensNJD4/LazyMan/master/VERSIONBETA").replace(" BETA", "").trim();
                    String[] curVerB = version.split("\\.");
                    int curMajorB = Integer.parseInt(curVerB[0]), curMinorB = Integer.parseInt(curVerB[1]), curPatchB = Integer.parseInt(curVerB[2]), curBuildB = Integer.parseInt(curVerB[3]);
                    if (curMajorB > major || (curMajorB == major && curMinorB > minor) || (curMajorB == major && curMinorB >= minor && curPatchB > patch) || (curMajorB == major && curMinorB >= minor && curPatchB >= patch && curBuildB > build)) {
                        if (MessageBox.ask("New beta update available!\nWould you like to update?", "New Update!") == MessageBox.yesOption()) {
                            SwingWorker<Void, Void> u = updating();
                            u.execute();
                            if (AutoUpdate.download(version)) {
                                if (AutoUpdate.unZipIt()) {
                                    String loc;

                                    if (!System.getProperty("os.name").toLowerCase().contains("linux")) {
                                        loc = Paths.get(".").toAbsolutePath().normalize().toString() + System.getProperty("file.separator");
                                        if (System.getProperty("os.name").toLowerCase().contains("win")) {
                                            loc += "LazyMan.exe";
                                        } else {
                                            loc += "LazyMan.jar";
                                        }
                                    } else {
                                        loc = new java.io.File(Props.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParent() + System.getProperty("file.separator") + "LazyMan.jar";
                                    }
                                    Runtime.getRuntime().exec("java -jar " + loc);
                                    System.exit(0);
                                }
                            }
                            MessageBox.show("Could not automatically update. Please manually update.", "Could not automatically update", 2);
                        }
                    } else {
                        updateMI.setVisible(false);
                    }
                }
            }
        } catch (UnknownHostException uhe) {
            MessageBox.show("You are either offline or GitHub is down to check for updates.", "Error", 2);
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    class Refresh extends TimerTask {

        private final int lg;

        public Refresh(int lg) {
            this.lg = lg;
        }

        @Override
        public void run() {
            SwingWorker<Void, Void> gg;
            gg = getGames(-1, lg);
            gg.execute();
        }
    }

    private SwingWorker<Void, Void> getSLOutput(final Process p) {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                try {
                    ProcessReader.putProcessOutput(p, consoleTA);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

    public void getVLCLocation() {
        String loc;
        java.io.File file;
        loc = Props.getVlcloc();

        if (loc.equals("")) {
            if (System.getProperty("os.name").toLowerCase().contains("win")) {
                loc = "C:\\Program Files\\VideoLAN\\VLC\\vlc.exe";
                file = new java.io.File(loc);
                if (file.exists()) {
                    Props.setVlcloc(loc);
                } else {
                    loc = "C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe";
                    file = new java.io.File(loc);
                    if (file.exists()) {
                        Props.setVlcloc(loc);
                    }
                }
            } else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
                loc = "/Applications/VLC.app/Contents/MacOS/VLC";
                file = new java.io.File(loc);
                if (file.exists()) {
                    Props.setVlcloc(loc);
                }
            } else {
                loc = "/usr/bin/vlc";
                file = new java.io.File(loc);
                if (file.exists()) {
                    Props.setVlcloc(loc);
                }
            }
        }
    }
}
